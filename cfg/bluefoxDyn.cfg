#!/usr/bin/env python
PACKAGE = "bluefox"
  
from dynamic_reconfigure.parameter_generator_catkin import *
 
gen = ParameterGenerator()
 
gen.add("int_param",    int_t,    0, "An Integer parameter", 50,  0, 100)
gen.add("double_param", double_t, 0, "A double parameter",    .5, 0,   1)
gen.add("str_param",    str_t,    0, "A string parameter",  "Hello World")
gen.add("bool_param",   bool_t,   0, "A Boolean parameter",  True)
 
size_enum = gen.enum([ gen.const("Small",      int_t, 0, "A small constant"),
                       gen.const("Medium",     int_t, 1, "A medium constant"),
                       gen.const("Large",      int_t, 2, "A large constant"),
                       gen.const("ExtraLarge", int_t, 3, "An extra large constant")],
                      "An enum to set size")
gen.add("aec", bool_t, 0,
        "Automatic exposure control",
        False)
# Expose us
gen.add("expose_us", int_t, 0,
        "Exposure time for an image in us",
        10000, 10, 100000)

# Automatic gain control
gen.add("agc", bool_t, 0,
        "Automatic gain control",
        False)
# Gain db
gen.add("gain_db", double_t, 0,
        "Gain in dB",
        0.0, 0.0, 32.0)

acs_enum = gen.enum(
    [gen.const("acs_unavailable", int_t, -1,
               "auto control parameters not available"),
     gen.const("acs_slow", int_t, 0,
               "coverge slowly to desired value"),
     gen.const("acs_medium", int_t, 1,
               "converge to desired value at medium speed"),
     gen.const("acs_fast", int_t, 2,
               "converge fast to desired value")],
    "Defines valid AutoControlSpeed modes")

# High dynamic range
gen.add("hdr", bool_t, 0,
        "High dynamic range",
        False)

gen.add("r_gain", double_t, 0, "red gain", 1, 0.1, 10)
gen.add("g_gain", double_t, 0, "green gain", 1, 0.1, 10)
gen.add("b_gain", double_t, 0, "blue gain", 1, 0.1, 10)
 
exit(gen.generate(PACKAGE, "bluefox", "bluefoxDyn"))
